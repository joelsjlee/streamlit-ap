{"ast":null,"code":"import{Streamlit}from\"streamlit-component-lib\";import{debounce}from\"underscore\";var map=null;/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */function onRender(event){// Get the RenderData from the event\nvar data=event.detail;//console.log(data.args)\nvar fig=data.args[\"fig\"];var height=data.args[\"height\"];var width=data.args[\"width\"];function onMapClick(e){var global_data=__GLOBAL_DATA__;global_data.lat_lng_clicked=e.latlng;debouncedUpdateComponentValue();}var debouncedUpdateComponentValue=debounce(updateComponentValue,250);function updateComponentValue(){var global_data=__GLOBAL_DATA__;var map=global_data.map;var bounds=map.getBounds();var zoom=map.getZoom();Streamlit.setComponentValue({last_clicked:global_data.lat_lng_clicked,last_object_clicked:global_data.last_object_clicked,all_drawings:global_data.all_drawings,last_active_drawing:global_data.last_active_drawing,bounds:bounds,zoom:zoom});}function onMapMove(e){debouncedUpdateComponentValue();}function onDraw(e){return onLayerClick(e);}function onLayerClick(e){var global_data=__GLOBAL_DATA__;global_data.last_object_clicked=e.latlng;// if (e.layer && e.layer.toGeoJSON) {\n//   global_data.last_active_drawing = e.layer.toGeoJSON();\n// }\n// let details: Array<any> = global_data.drawnItems.toGeoJSON().features;\n// global_data.all_drawings = details;\ndebouncedUpdateComponentValue();}if(map==null){try{map=__GLOBAL_DATA__.map;}catch(e){// Only run this if the map hasn't already been created (and thus the global\n//data hasn't been initialized)\nvar map_div=document.getElementById(\"map_div\");var map_div2=document.getElementById(\"map_div2\");if(map_div2){map_div2.style.height=\"\".concat(height,\"px\");map_div2.style.width=\"\".concat(width,\"px\");}if(map_div){map_div.style.height=\"\".concat(height,\"px\");map_div.style.width=\"\".concat(width,\"px\");if(fig.indexOf(\"document.getElementById('export')\")!==-1){var a=document.createElement(\"a\");a.href=\"#\";a.id=\"export\";a.innerHTML=\"Export\";document.body.appendChild(a);}var render_script=document.createElement(\"script\");// HACK -- update the folium-generated JS to add, most importantly,\n// the map to this global variable so that it can be used elsewhere\n// in the script.\nvar set_global_data=\"\\n          window.__GLOBAL_DATA__ = {\\n            map: map_div,\\n            bounds: map_div.getBounds(),\\n            lat_lng_clicked: null,\\n            last_object_clicked: null,\\n            all_drawings: null,\\n            last_active_drawing: null,\\n            zoom: null,\\n            drawnItems: drawnItems,\\n        };\";var replaced=fig+set_global_data;render_script.innerHTML=replaced;document.body.appendChild(render_script);var global_data=__GLOBAL_DATA__;var _map=global_data.map;_map.on('click',onMapClick);_map.on('moveend',onMapMove);for(var key in _map._layers){var layer=_map._layers[key];layer.on(\"click\",onLayerClick);}_map.on('draw:created',onDraw);_map.on('draw:edited',onDraw);_map.on('draw:deleted',onDraw);Streamlit.setFrameHeight();updateComponentValue();}}}}// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/joelslee/Desktop/newfolium/streamlit-folium/streamlit_folium/frontend/src/index.tsx"],"names":["Streamlit","debounce","map","onRender","event","data","detail","fig","args","height","width","onMapClick","e","global_data","__GLOBAL_DATA__","lat_lng_clicked","latlng","debouncedUpdateComponentValue","updateComponentValue","bounds","getBounds","zoom","getZoom","setComponentValue","last_clicked","last_object_clicked","all_drawings","last_active_drawing","onMapMove","onDraw","onLayerClick","map_div","document","getElementById","map_div2","style","indexOf","a","createElement","href","id","innerHTML","body","appendChild","render_script","set_global_data","replaced","on","key","_layers","layer","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"mappings":"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","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport { debounce } from \"underscore\";\n\nlet map: any = null;\n\ntype GlobalData = {\n  map: any;\n  lat_lng_clicked: any;\n  last_object_clicked: any;\n  last_active_drawing: any,\n  all_drawings: any,\n  bounds: any;\n  zoom: any;\n  drawnItems: any;\n};\n\ndeclare var __GLOBAL_DATA__: GlobalData;\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  //console.log(data.args)\n  const fig: string = data.args[\"fig\"];\n  const height: number = data.args[\"height\"];\n  const width: number = data.args[\"width\"];\n\n  function onMapClick(e: any) {\n    const global_data = __GLOBAL_DATA__;\n    global_data.lat_lng_clicked = e.latlng;\n    debouncedUpdateComponentValue()\n  }\n\n  let debouncedUpdateComponentValue = debounce(updateComponentValue, 250)\n\n  function updateComponentValue() {\n    const global_data = __GLOBAL_DATA__;\n    let map = global_data.map;\n    let bounds = map.getBounds();\n    let zoom = map.getZoom();\n    Streamlit.setComponentValue({\n      last_clicked: global_data.lat_lng_clicked,\n      last_object_clicked: global_data.last_object_clicked,\n      all_drawings: global_data.all_drawings,\n      last_active_drawing: global_data.last_active_drawing,\n      bounds: bounds,\n      zoom: zoom,\n    })\n  }\n\n  function onMapMove(e: any) {\n    debouncedUpdateComponentValue()\n  }\n\n  function onDraw(e: any) {\n    return onLayerClick(e);\n  }\n\n  function onLayerClick(e: any) {\n    const global_data = __GLOBAL_DATA__;\n    global_data.last_object_clicked = e.latlng;\n    // if (e.layer && e.layer.toGeoJSON) {\n    //   global_data.last_active_drawing = e.layer.toGeoJSON();\n    // }\n    // let details: Array<any> = global_data.drawnItems.toGeoJSON().features;\n    // global_data.all_drawings = details;\n    debouncedUpdateComponentValue()\n  }\n\n  if (map == null) {\n    try {\n      map = __GLOBAL_DATA__.map;\n    } catch (e) {\n      // Only run this if the map hasn't already been created (and thus the global\n      //data hasn't been initialized)\n      const map_div = document.getElementById(\"map_div\");\n      const map_div2 = document.getElementById(\"map_div2\");\n      if (map_div2) {\n        map_div2.style.height = `${height}px`\n        map_div2.style.width = `${width}px`\n      }\n      if (map_div) {\n        map_div.style.height = `${height}px`\n        map_div.style.width = `${width}px`\n\n        if (fig.indexOf(\"document.getElementById('export')\") !== -1) {\n          let a = document.createElement(\"a\");\n          a.href = \"#\";\n          a.id = \"export\";\n          a.innerHTML = \"Export\";\n          document.body.appendChild(a);\n        }\n\n        const render_script = document.createElement(\"script\")\n        // HACK -- update the folium-generated JS to add, most importantly,\n        // the map to this global variable so that it can be used elsewhere\n        // in the script.\n        let set_global_data = `\n          window.__GLOBAL_DATA__ = {\n            map: map_div,\n            bounds: map_div.getBounds(),\n            lat_lng_clicked: null,\n            last_object_clicked: null,\n            all_drawings: null,\n            last_active_drawing: null,\n            zoom: null,\n            drawnItems: drawnItems,\n        };`;\n        let replaced = fig + set_global_data;\n        render_script.innerHTML = replaced;\n        document.body.appendChild(render_script);\n\n        const global_data = __GLOBAL_DATA__;\n        let map = global_data.map;\n\n        map.on('click', onMapClick);\n        map.on('moveend', onMapMove);\n        for (let key in map._layers) {\n          let layer = map._layers[key];\n          layer.on(\"click\", onLayerClick)\n        }\n        map.on('draw:created', onDraw);\n        map.on('draw:edited', onDraw);\n        map.on('draw:deleted', onDraw);\n\n        Streamlit.setFrameHeight()\n        updateComponentValue();\n      }\n    }\n  }\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()"]},"metadata":{},"sourceType":"module"}